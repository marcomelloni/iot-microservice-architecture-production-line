{
  "info": {
    "_postman_id": "8323c6fb-1cbb-4200-b060-42ea34abe3ae",
    "name": "http-api-production-line-iot",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "34633854"
  },
  "item": [
    {
      "name": "Get All Robots",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "var template = `",
              "<style type=\"text/css\">",
              "    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
              "    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
              "    .tftable tr {background-color:#ffffff;}",
              "    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
              "    .tftable tr:hover {background-color:#e0ffff;}",
              "</style>",
              "",
              "<table class=\"tftable\" border=\"1\">",
              "    <tr>",
              "        <th>Arm ID</th>",
              "        <th>Manufacturer</th>",
              "        <th>Number of Joints</th>",
              "    </tr>",
              "    ",
              "    {{#each response}}",
              "        <tr>",
              "            <td>{{arm_id}}</td>",
              "            <td>{{manufacturer}}</td>",
              "            <td>{{number_of_joints}}</td>",
              "        </tr>",
              "    {{/each}}",
              "</table>",
              "`;",
              "",
              "function constructVisualizerPayload() {",
              "    return {response: pm.response.json()}",
              "}",
              "",
              "pm.visualizer.set(template, constructVisualizerPayload());"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/robots",
          "host": ["{{base_url}}"],
          "path": ["robots"]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Get Joint Consumptions for a robot arm",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "var template = `",
              "<style type=\"text/css\">",
              "    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
              "    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
              "    .tftable tr {background-color:#ffffff;}",
              "    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
              "    .tftable tr:hover {background-color:#e0ffff;}",
              "</style>",
              "",
              "<table class=\"tftable\" border=\"1\">",
              "    <tr>",
              "        <th>Joint ID</th>",
              "        <th>Consumption</th>",
              "        <th>Timestamp</th>",
              "    </tr>",
              "    ",
              "    {{#each response}}",
              "        <tr>",
              "            <td>{{joint_id}}</td>",
              "            <td>{{consumption}}</td>",
              "            <td>{{timestamp}}</td>",
              "        </tr>",
              "    {{/each}}",
              "</table>",
              "`;",
              "",
              "function constructVisualizerPayload() {",
              "    return {response: pm.response.json()}",
              "}",
              "",
              "pm.visualizer.set(template, constructVisualizerPayload());"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/robot/{{robot_id}}/telemetry/joints_consumption",
          "host": ["{{base_url}}"],
          "path": ["robot", "{{robot_id}}", "telemetry", "joints_consumption"]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Get Faults",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "var template = `",
              "<style type=\"text/css\">",
              "    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
              "    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
              "    .tftable tr {background-color:#ffffff;}",
              "    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
              "    .tftable tr:hover {background-color:#e0ffff;}",
              "</style>",
              "",
              "<table class=\"tftable\" border=\"1\">",
              "    <tr>",
              "        <th>Joint ID</th>",
              "        <th>Consumption</th>",
              "        <th>Timestamp</th>",
              "    </tr>",
              "    ",
              "    {{#each response}}",
              "        <tr>",
              "            <td>{{joint_id}}</td>",
              "            <td>{{consumption}}</td>",
              "            <td>{{timestamp}}</td>",
              "        </tr>",
              "    {{/each}}",
              "</table>",
              "`;",
              "",
              "function constructVisualizerPayload() {",
              "    return {response: pm.response.json()}",
              "}",
              "",
              "pm.visualizer.set(template, constructVisualizerPayload());"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/robot/faults",
          "host": ["{{base_url}}"],
          "path": ["robot", "faults"]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Get Weight End Effector for a robot arm",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "var template = `",
              "<style type=\"text/css\">",
              "    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
              "    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
              "    .tftable tr {background-color:#ffffff;}",
              "    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
              "    .tftable tr:hover {background-color:#e0ffff;}",
              "</style>",
              "",
              "<table class=\"tftable\" border=\"1\">",
              "    <tr>",
              "        <th>Joint ID</th>",
              "        <th>Consumption</th>",
              "        <th>Timestamp</th>",
              "    </tr>",
              "    ",
              "    {{#each response}}",
              "        <tr>",
              "            <td>{{joint_id}}</td>",
              "            <td>{{consumption}}</td>",
              "            <td>{{timestamp}}</td>",
              "        </tr>",
              "    {{/each}}",
              "</table>",
              "`;",
              "",
              "function constructVisualizerPayload() {",
              "    return {response: pm.response.json()}",
              "}",
              "",
              "pm.visualizer.set(template, constructVisualizerPayload());"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/robot/{{robot_id}}/telemetry/weight_ee",
          "host": ["{{base_url}}"],
          "path": ["robot", "{{robot_id}}", "telemetry", "weight_ee"]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Post Joint Consumptions for a robot arm",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"joint_id\": \"joint1\",\n    \"consumption\": 198.5,\n    \"timestamp\": \"2025-01-31T14:30:00\"\n}\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/robot/{{robot_id}}/telemetry/joints_consumption",
          "host": ["{{base_url}}"],
          "path": ["robot", "{{robot_id}}", "telemetry", "joints_consumption"]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Post Faults",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"robot_id\": \"RA_001\",\n    \"fault\": \"Robot RA_001 - Joint J1 consumed 105 kW at 2025-01-10\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/robot/faults",
          "host": ["{{base_url}}"],
          "path": ["robot", "faults"]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Post Weight End Effector for a robot arm",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"weight_ee\": 19.00\n}\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/robot/{{robot_id}}/telemetry/weight_ee",
          "host": ["{{base_url}}"],
          "path": ["robot", "{{robot_id}}", "telemetry", "weight_ee"]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "id",
      "value": "1"
    },
    {
      "key": "base_url",
      "value": "http://127.0.0.1:7070/api/v1/productionline"
    },
    {
      "key": "robot_id",
      "value": "arm1",
      "type": "default"
    }
  ]
}
